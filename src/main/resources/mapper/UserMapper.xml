<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.test.mapper.UserMapper">

    <resultMap id="BaseResultMap" type="com.example.test.bean.UserBean">
        <result column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="role" property="role" jdbcType="VARCHAR"/>
    </resultMap>

    <!--验证用户账号和密码-->
    <select id="getInfo" parameterType="String" resultMap="BaseResultMap">
        SELECT *
        FROM users
        WHERE name = #{name}
          AND password = #{password}
    </select>

    <!--根据ID查询用户信息-->
    <select id="selectUserById" parameterType="String" resultType="com.example.test.bean.UserBean">
        SELECT *
        FROM users
        WHERE id = #{id};
    </select>

    <!--插入新用户信息，ID是自动生成的,返回数据库操作影响行数，为0则是失败-->
    <insert id="insertUser" parameterType="com.example.test.bean.UserBean">
        INSERT INTO users(name, password, role)
        VALUES (#{name}, #{password}, #{role});
    </insert>

    <!--根据ID删除用户，返回数据库操作影响行数，为0则是失败-->
    <delete id="deleteUser" parameterType="String">
        DELETE
        FROM users
        WHERE id = #{id};
    </delete>

    <!--根据ID修改用户信息，返回数据库操作影响行数，为0则是失败-->
    <update id="updateUser" parameterType="com.example.test.bean.UserBean">
        UPDATE users
        SET password = #{password},
            name     = #{name},
            role     = #{role}
        WHERE id = #{id};
    </update>

    <!--查询所有用户信息，返回一个List<Bean>-->
    <select id="getAllUser" resultType="com.example.test.bean.UserBean">
        SELECT *
        FROM users;
    </select>

    <select id="getBookNumber" parameterType="int" resultType="int">
        SELECT number
        FROM books
        WHERE id = #{id};
    </select>

    <update id="updateBookNumber" parameterType="int">
        UPDATE books
        SET number = #{number}
        WHERE id = #{id};
    </update>

    <!--增加用户借书记录，为0则是失败-->
    <insert id="addBorrowInfo" parameterType="com.example.test.bean.HistoryBean">
        INSERT INTO histories(user_id, book_id, borrow_date)
        VALUES (#{user_id}, #{book_id}, #{borrow_date});
    </insert>

    <!--用户还书时间，为0则是失败-->
    <update id="addReturnInfo" parameterType="com.example.test.bean.HistoryBean">
        UPDATE histories
        SET return_date = #{return_date}
        WHERE id = #{id};
    </update>

</mapper>